package com.company.rmi.server;

import com.company.rmi.Hello;
import com.company.rmi.HelloImpl;

import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;

/**
 * В строке <code>LocateRegistry.createRegistry(1099)</code> создается и запускается реестр RMI (RMI Registry) на порте 1099. RMI Registry - это служба, предоставляемая Java RMI, которая позволяет клиентам находить удаленные объекты по имени. Эта служба предоставляет простое средство для клиентов и серверов, чтобы найти друг друга и установить соединение для удаленного вызова методов.
 * <p>
 * При вызове <code>LocateRegistry.createRegistry(1099)</code>, создается новый экземпляр реестра RMI, прослушивающий указанный порт (в данном случае 1099). Этот порт будет использоваться для взаимодействия между клиентами и серверами через RMI. Если указанный порт занят или недоступен, будет выброшено исключение.
 * <p>
 * Если реестр RMI уже запущен на нужном порту, можно использовать LocateRegistry.getRegistry() для получения ссылки на существующий реестр, вместо создания нового.
 * <p>
 * <p>
 * В строке <code>Naming.rebind("Hello", helloImpl)</code> происходит регистрация (привязка) удаленного объекта helloImpl в реестре RMI с именем "Hello". Это делается для того, чтобы клиенты могли находить этот удаленный объект по указанному имени и вызывать его методы.
 * <p>
 * Naming.rebind(String name, Remote obj) - это статический метод класса java.rmi.Naming, который выполняет следующие операции:
 * <p>
 * Преобразует указанное имя (в данном случае "Hello") в URL формата rmi://hostname/name. Если хост не указан явно, будет использован локальный хост.
 * Определяет реестр RMI, связанный с указанным хостом и портом (по умолчанию использует порт 1099).
 * Регистрирует указанный удаленный объект helloImpl в реестре RMI с преобразованным именем. Если объект с таким именем уже существует, он будет замен ен на новый объект.
 * <p>
 * После успешного выполнения этой операции, удаленный объект helloImpl будет доступен для клиентов по указанному имени "Hello". Клиенты могут использовать метод <code>Naming.lookup()</code> для получения ссылки на удаленный объект, зарегистрированный с данным именем, и вызывать его методы.
 * <p>
 * В случае возникновения ошибок, таких как проблемы с сетевым доступом или невозможность связаться с реестром RMI, метод rebind() может выбросить исключение java.rmi.RemoteException или другие подклассы java.rmi.RemoteException. В этом случае, следует обработать исключение соответствующим образом, например, выводом информации об ошибке и завершением программы.
 */
public class Server {
    public static void main(String[] args) {
        try {
            LocateRegistry.createRegistry(1099);     // создается и запускается реестр RMI на порту 1099 с помощью которого
                                                          // клиент может взаимодействовать с сервером через RMI
            Hello helloImpl = new HelloImpl();
            Naming.rebind("Hello", helloImpl);      // привязка типа HelloImpl к имени "Hello", чтобы клиент мог по имени обратиться к классу на сервере
            System.out.println("RMI Server is running...");
        } catch (Exception e) {
            System.err.println("Server exception: " + e);
            e.printStackTrace();
        }
    }
}

